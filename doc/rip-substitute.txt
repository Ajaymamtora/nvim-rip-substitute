*rip-substitute.txt* Auto-generated from README.md. Do not make PRs to this file.

==============================================================================
Table of Contents                           *rip-substitute-table-of-contents*

1. rip-substitute                             |rip-substitute-rip-substitute-|
  - Table of Contents       |rip-substitute-rip-substitute--table-of-contents|
  - Features                         |rip-substitute-rip-substitute--features|
  - Installation                 |rip-substitute-rip-substitute--installation|
  - Configuration               |rip-substitute-rip-substitute--configuration|
  - Usage                               |rip-substitute-rip-substitute--usage|
  - Limitations                   |rip-substitute-rip-substitute--limitations|
  - About the developer   |rip-substitute-rip-substitute--about-the-developer|

==============================================================================
1. rip-substitute                             *rip-substitute-rip-substitute-*

Amodern substitute for vim’s `:substitute`, using `ripgrep`.


  [!NOTE] This plugin is still in early development. Its features and options are
  subject to change.



TABLE OF CONTENTS           *rip-substitute-rip-substitute--table-of-contents*

- |rip-substitute-features|
- |rip-substitute-installation|
- |rip-substitute-configuration|
- |rip-substitute-usage|
- |rip-substitute-limitations|
- |rip-substitute-about-the-developer|


FEATURES                             *rip-substitute-rip-substitute--features*

- Search and replace using `ripgrep` — no more arcane vim regex to learn.
- Incremental preview of matches and replacements.
- Popup window instead of command line. This means:
    - Syntax highlighting of the regex.
    - Editing with vim motions.
    - No more dealing with delimiters.
- Sensible defaults: searches the entire buffer (`%`), all matches in a line
    (`/g`), case-sensitive (`/I`).
- Automatic prefill of the search term: cursorword (normal mode), selected text
    (visual mode).
- Notification on how many replacements were made (optional).
- Increased readability. Judge for yourself which one you find more readable
    (both substitutions do the same thing):
    >bash
        # vim's :substitute
        :% s/\(foo\)bar\(\.\)\@!/\1baz/g
        
        # rip-substitute
        (foo)bar(?!\.)
        $1baz
    <


INSTALLATION                     *rip-substitute-rip-substitute--installation*

**Requirements** - `ripgrep` - nvim >= 0.10 - `:TSInstall regex` (optional, but
recommended)

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-rip-substitute",
        keys = {
            {
                "<leader>fs",
                function() require("rip-substitute").sub() end,
                mode = { "n", "x" },
                desc = " rip substitute",
            },
        },
    },
    
    -- packer
    use {
        "chrisgrieser/nvim-rip-substitute",
    }
<


CONFIGURATION                   *rip-substitute-rip-substitute--configuration*

>lua
    -- default settings
    require("rip-substitute").setup {
        popupWin = {
            width = 40,
            border = "single",
        },
        keymaps = {
            confirm = "<CR>",
            abort = "q",
        },
        regexOptions = {
            -- pcre2 enables lookarounds and backreferences, but performs slower.
            pcre2 = true,
            -- By default, rg treats `$1a` as the named capture group "1a". When set
            -- to `true`, `$1a` is automatically changed to `${1}a` to ensure the
            -- capture group is correctly determined. Disable this setting if you
            -- plan an using named capture groups.
            autoBraceSimpleCaptureGroups = true,
        },
        prefill = {
            normal = "cursorword", -- "cursorword"|false
            visual = "selectionFirstLine", -- "selectionFirstLine"|false
        },
        notificationOnSuccess = true,
    }
<


USAGE                                   *rip-substitute-rip-substitute--usage*

>lua
    require("rip-substitute").sub()
<


LIMITATIONS                       *rip-substitute-rip-substitute--limitations*

- `--multiline` and various other flags are not supported yet.
- The incremental preview does not support _hiding_ the search terms.
- This plugin only searches the current buffer. To search and replace in
    multiple files via `ripgrep`, use
    grug-far.nvim <https://github.com/MagicDuck/grug-far.nvim>.


ABOUT THE DEVELOPER       *rip-substitute-rip-substitute--about-the-developer*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

- Academic Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
